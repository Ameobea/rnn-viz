Learning the 4-state state machine that chooses between different logic gates depending on the operation:

```py
learning_rate = 0.004
seq_len = 40
input_dim = one_batch_examples(1, seq_len)[0].shape[-1]
output_dim = one_batch_examples(1, seq_len)[1].shape[-1]
batch_size = 1024 * 4

np.set_printoptions(suppress=True)

init = "glorot_normal"
# init = {"id": "uniform", "low": -1, "high": 1}

reg = SparseRegularizer(intensity=0.1, threshold=0.025, steepness=25, l1=0.001) # not 100% sure if intensity was 0.1 or 0.05, I think 0.1
activation = {"id": "interpolated_ameo", "factor": 0.5, "leakyness": 0.01}

rnn = CustomRNN(
    CustomRNNCell(
        input_shape=(
            batch_size,
            seq_len,
            input_dim,
        ),
        output_dim=16,
        state_size=10,
        output_activation_id=activation,
        recurrent_activation_id=activation,
        trainable_initial_state=True,
        use_bias=True,
        output_kernel_regularizer=reg,
        recurrent_kernel_regularizer=reg,
        kernel_initializer=init,
        bias_initializer=init,
        initial_state_initializer=init,
        # output_bias_regularizer=reg,
        # recurrent_bias_regularizer=reg,
        cell_ix=0,
    ),
    CustomRNNCell(
        input_shape=(
            batch_size,
            seq_len,
            16,
        ),
        output_dim=16,
        state_size=10,
        output_activation_id=activation,
        recurrent_activation_id=activation,
        trainable_initial_state=True,
        use_bias=True,
        output_kernel_regularizer=reg,
        recurrent_kernel_regularizer=reg,
        kernel_initializer="glorot_normal",
        bias_initializer="glorot_normal",
        initial_state_initializer="glorot_normal",
        # output_bias_regularizer=reg,
        # recurrent_bias_regularizer=reg,
        cell_ix=1,
    ),
)
```

Trained 25k iterations.  Loss continued to drop all the way to the end, slowing down at the end ofc.

Requires a few restarts to find good starting params before it goes very well tho
